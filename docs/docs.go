// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/diff/{host}": {
            "get": {
                "description": "Returns ports that were newly opened or closed in the most recent scan for the host.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scan"
                ],
                "summary": "Compare last 2 scans",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host or IP address",
                        "name": "host",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PortDiff"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/results/{host}": {
            "get": {
                "description": "Returns up to 10 recent scan results for a host. Optionally filter by scan ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scan"
                ],
                "summary": "Get scan results",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host or IP address",
                        "name": "host",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by scan ID",
                        "name": "scan_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ScanResult"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/scan": {
            "post": {
                "description": "Scans one or more IPs or hostnames in the background and returns a scan ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scan"
                ],
                "summary": "Initiate a scan",
                "parameters": [
                    {
                        "description": "Scan input",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ScanRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/scan/status/{scan_id}": {
            "get": {
                "description": "Returns progress status for a scan ID, including host-wise scan completion states.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scan"
                ],
                "summary": "Get scan job status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scan ID",
                        "name": "scan_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.PortDiff": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                },
                "newly_closed": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "newly_opened": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "models.ScanRequest": {
            "type": "object",
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.ScanResult": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                },
                "open_ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "scan_id": {
                    "type": "string"
                },
                "scanned_at": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
